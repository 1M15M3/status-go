#!/usr/bin/env groovy

node('linux') {
    env.GOPATH = "${env.WORKSPACE}"
    env.PATH = "${env.PATH}:${env.GOPATH}/bin"

    cloneDir = 'src/github.com/status-im/status-go'
    paramBranch = env.branch ? env.branch : '*/develop'

    dir(cloneDir) {
        try {
            deleteDir()
        } catch (err) {
            echo "failure while cleaning the directory"
        }
    }

    checkout(
        changelog: false,
        poll: true,
        scm: [$class: 'GitSCM', branches: [[name: paramBranch]],
        doGenerateSubmoduleConfigurations: false,
        extensions: [
            [$class: 'RelativeTargetDirectory', relativeTargetDir: cloneDir]
        ],
        submoduleCfg: [],
        userRemoteConfigs: [[url: 'https://github.com/status-im/status-go']]]
    )

    def remoteOriginRegex = ~/^remotes\/origin\//

    dir(cloneDir) {
        gitSHA = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
        gitShortSHA = gitSHA.take(8)
        gitBranch = sh(returnStdout: true, script: 'git name-rev --name-only HEAD').trim() - remoteOriginRegex
    }

    stage('Debug') {
        sh 'env'
        println(gitBranch)
        println(gitSHA)
    }

    stage('Build and test') {
        dir(cloneDir) {
            sh 'make setup'
            sh 'make ci'
        }
    }

    stage('Build packages') {
        sh 'go get github.com/status-im/xgo'
        dir(cloneDir) {
            // Ensure folders are created with correct owner (otherwise xgo will create files owned by root)
            sh 'mkdir -p build/lib/'
        }

        parallel (
            'statusgo-android': {
                dir(cloneDir) {
                    sh 'make statusgo-android'
                }
            },
            'statusgo-ios-simulator': {
                dir(cloneDir) {
                    sh '''
                        make statusgo-ios-simulator
                        cd build/bin/statusgo-ios-9.3-framework/
                        zip -r status-go-ios.zip Statusgo.framework
                    '''
                }
            }
        )

        parallel (
            'statusgo-linux': {
                dir(cloneDir) {
                    sh """
                        make statusgo-linux
                        mkdir -p build/lib/linux
                        cd build/lib/linux
                        mkdir -p include lib
                        mv ../statusgo-linux-amd64.a lib/libstatus.a
                        mv ../statusgo-linux-amd64.h include/libstatus.h
                        zip status-go-linux.zip lib/* include/*
                    """
                }
            },
            'statusgo-windows': {
                dir(cloneDir) {
                    sh """
                        make statusgo-windows
                        mkdir -p build/lib/windows
                        cd build/lib/windows
                        mkdir -p include lib
                        mv ../statusgo-windows-4.0-amd64.lib lib/status.lib
                        mv ../statusgo-windows-4.0-amd64.h include/status.h
                        zip status-go-win-x86-64.zip lib/* include/*
                    """
                }
            },
            'statusgo-macos': {
                dir(cloneDir) {
                    sh """
                        make statusgo-macos
                        mkdir -p build/lib/darwin
                        cd build/lib/darwin
                        mkdir -p include lib
                        mv ../statusgo-darwin-10.6-amd64.a lib/libstatus.a
                        mv ../statusgo-darwin-10.6-amd64.h include/libstatus.h
                        zip status-go-darwin.zip lib/* include/*
                    """
                }
            }
        )
    }

    stage('Deploy') {
        dir(cloneDir) {
            sh "make prepare-release"
            withCredentials([[
                $class: 'UsernamePasswordMultiBinding',
                credentialsId: 'status-im-auto',
                usernameVariable: 'GITHUB_USER',
                passwordVariable: 'GITHUB_TOKEN'
            ]]) {
              sh """
                yes | make release release_branch=${gitBranch}
              """
            }
            sh "make clean-release"
        }
    }
}
