// Code generated by MockGen. DO NOT EDIT.
// Source: geth/node/rpc.go

// Package node is a generated GoMock package.
package node

import (
	node "github.com/ethereum/go-ethereum/node"
	gomock "github.com/golang/mock/gomock"
	geth "github.com/status-im/status-go/geth/common/geth"
	params "github.com/status-im/status-go/geth/params"
	reflect "reflect"
)

// MockrpcAccess is a mock of rpcAccess interface
type MockrpcAccess struct {
	ctrl     *gomock.Controller
	recorder *MockrpcAccessMockRecorder
}

// MockrpcAccessMockRecorder is the mock recorder for MockrpcAccess
type MockrpcAccessMockRecorder struct {
	mock *MockrpcAccess
}

// NewMockrpcAccess creates a new mock instance
func NewMockrpcAccess(ctrl *gomock.Controller) *MockrpcAccess {
	mock := &MockrpcAccess{ctrl: ctrl}
	mock.recorder = &MockrpcAccessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockrpcAccess) EXPECT() *MockrpcAccessMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockrpcAccess) Init(node *node.Node, upstream params.UpstreamRPCConfig) error {
	ret := m.ctrl.Call(m, "Init", node, upstream)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockrpcAccessMockRecorder) Init(node, upstream interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockrpcAccess)(nil).Init), node, upstream)
}

// Client mocks base method
func (m *MockrpcAccess) Client() geth.RPCClient {
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(geth.RPCClient)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockrpcAccessMockRecorder) Client() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockrpcAccess)(nil).Client))
}
