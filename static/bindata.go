// Code generated by go-bindata.
// sources:
// ../config/cli/fleet-eth.beta.json
// ../config/cli/fleet-eth.staging.json
// ../config/cli/fleet-eth.test.json
// ../config/cli/les-enabled.json
// ../config/status-chain-genesis.json
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ConfigCliFleetEthBetaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x56\x4b\x6f\x5d\xc7\x0d\xde\xfb\x57\x08\x5a\x17\x57\xc3\xf7\xd0\x2b\x37\x69\x52\x23\x69\x03\xe7\xe1\x34\x69\xd1\x05\x87\xe4\xd8\x6a\x5c\x2b\x95\x65\xa3\x71\x91\xff\x5e\x1c\x55\x45\x6c\x27\x5a\x5c\xe0\x62\xee\x39\xc3\xef\xf2\x7b\x90\xff\x79\x70\x76\x76\xfe\xc5\xd5\x1f\x2e\x5f\xe5\xd5\x9b\xbe\xfe\xe9\xfc\xe1\xd9\xcd\xf5\xeb\xfe\xdd\x71\xfc\x55\xbf\xac\x7e\xfb\xe6\xea\xf5\xab\x77\x4f\x3f\x7e\xf1\xfa\xd5\x4d\x5f\x7f\x7c\xf5\x72\x5f\x3e\x3b\x7f\x78\x76\xdc\x70\x76\x76\xfe\xc9\xcb\x58\x2f\xba\xde\x79\xf2\xec\xec\xfc\xd3\x17\xdd\x37\xe7\x0f\xcf\xce\xfb\xe6\xf9\x69\xf5\x4d\x9c\xdf\xfd\xf0\xd1\xd5\xd5\xcd\x17\x57\xd5\xc7\xcd\x7f\xbb\x3d\x3a\x3b\x3b\xef\x97\x57\xd5\x0f\x2f\x2e\x7a\x86\xe5\xa0\x25\xd3\x01\xda\xe7\x5a\xa5\x1a\x99\x0b\x43\xa4\xc4\x74\xd2\x26\x59\x48\x6b\x7b\xed\x8c\xe9\x2d\x8d\xcc\xbd\x24\x93\x36\xca\x80\xb9\x18\x00\x6b\xc9\xb0\x1d\x19\xc4\x7b\xa9\xef\xbd\x98\x17\x29\x6e\xf3\xae\x70\x0b\x55\x8f\x59\x1b\x3d\x0d\x5b\x85\x19\xd4\x26\x3f\x62\x3b\x39\x9c\x10\xf9\x44\xf2\x90\x06\x0f\xbe\xc3\xfd\x0e\x48\x26\xcd\xd4\xad\xc6\x8e\x73\x57\x7a\xf8\x36\xf7\xb1\xd1\x99\xc7\xc0\xa5\x53\x0a\x92\x6c\x0f\x94\x84\xd5\x8c\x02\x53\x96\x2c\xd8\xc3\xc7\xd8\x1d\x1b\x32\x13\x43\x81\x06\xea\xdc\xee\xe3\x78\x2c\xac\x50\x70\x93\xd1\xc0\x9c\x44\x12\x98\x10\x8a\x46\xda\x8e\x84\xea\x90\x49\xf1\x08\x8c\x4f\x40\xf3\x04\x43\x4e\xc8\x74\x1f\x4e\x63\xb4\xda\x4d\x73\x15\xe7\xb6\x94\xb9\x96\x2b\x83\xcd\xa1\x3b\x16\x8a\x4d\xec\xa4\xd6\xc1\x1a\x73\x08\x91\x8d\x81\x98\x2b\x02\x27\x08\x69\xcf\x52\xee\x2c\x58\x03\x1b\xf6\xdc\x86\xa6\xb3\xd1\xa5\x86\xa2\xcc\x15\x4c\x35\x27\x0d\xae\x35\x74\xb6\x6e\x64\xb0\xe8\xb9\x72\x79\xe8\x23\x18\x7c\x02\xe1\xd3\x9c\x27\xc0\x7b\x61\x32\x39\xdb\x54\xca\x1d\x12\x51\x00\x36\x37\x4f\x8c\x24\x89\xd9\x6b\x39\x80\x66\x75\x41\x22\x6d\xdb\x1e\x1b\x82\x6d\x45\xed\x84\x6e\xdb\xa3\xca\x3b\x87\x30\x31\x58\x26\xb1\x21\x4a\x68\xb3\x35\x6b\xea\x34\xda\xca\x26\xe2\xcd\xc4\xc4\xe2\x9a\xc2\x0d\x16\x5c\x14\xd0\xb7\x9c\x0b\x9e\x8e\x9e\xf2\xb8\x0f\xa4\x90\x4b\xc4\xb2\x49\xb4\xa1\x73\xa9\xc1\x12\x5f\x7b\x08\x42\x6e\x1c\x88\xbc\x7b\x82\xe2\x4e\x2a\x54\x93\x6a\xee\xe6\x12\x25\x0d\x93\x4e\xc2\x02\x3a\xb8\x4e\x98\x5c\x7b\x16\x54\xed\x98\x83\x9c\xc9\x87\xce\x89\x15\x8a\xc1\xb5\x19\x8b\x77\xe6\xd6\x3a\x98\x9a\x20\x1a\xd3\x1e\xe1\xd0\x13\x4c\x3f\xf8\x3e\x89\xdd\x07\xb3\x57\xef\x58\xe4\x4b\x7d\xad\xd5\xca\x35\xb3\xa6\xae\x36\x95\x45\xab\x49\xb4\x66\xf2\x42\x56\x1d\x5b\xa5\xd8\x09\x98\x62\x24\xf3\xa6\x99\x53\x02\xc5\x68\x8c\x83\x04\x9b\x2c\xe2\x18\xb0\x06\x11\x4e\x00\x61\x6c\x0f\x99\x38\x21\x27\xc9\x8a\x55\x65\x72\xfb\x65\x29\xf7\x4e\x78\x44\x72\xc2\x81\x27\xf7\xc3\x43\x77\x28\x6f\x41\xfe\xfd\xce\xfe\xdf\x5c\x1f\x19\x52\x7f\x8e\xcb\x17\x5f\xf7\xf5\x9b\xbe\xfe\xcd\x1c\xa8\x50\x68\xef\xbd\xa7\x86\xa8\x12\x2d\x25\xd9\x73\x5a\xcd\xe5\xd0\x63\x6f\x41\xd2\xb5\x72\xc8\x9a\xa0\x3e\x89\xd1\xb1\x1d\x63\x2f\x47\x47\xaf\xdc\xda\xbb\xd6\x61\xa6\x20\xf3\x41\x15\x73\xf7\xa0\xc9\x25\x31\x62\x22\x5b\x4f\xda\x90\x8d\x00\x11\xc7\xeb\x63\x2c\x2d\x9c\x29\x3c\xef\x72\x00\x44\x4f\x7e\x08\x57\x7e\xab\xd9\xc9\xb8\x49\x67\x20\xed\xf0\xd9\x2d\xac\xbb\xf0\x90\xdf\x30\xf1\xa1\x48\x48\xc8\xde\x5b\xc5\x0a\xb5\x48\x2c\xcc\x8c\x99\xa2\xf3\xf0\x0c\x2c\xf4\xa0\x40\xec\x4d\x6d\x47\xdd\x86\xc9\x4e\x55\xb1\x05\x82\x60\x8d\xe8\xd2\x61\xbe\x4a\x7b\xb5\x44\x4f\x9a\x3b\x77\x6c\x0a\xf6\xf7\x34\x01\x8a\xf7\xe1\xb4\x6a\xf7\xe6\x5c\xb0\x48\x90\x56\xa1\x66\x20\x20\xa9\x0b\x0f\x3d\xa4\x60\x69\x08\x51\xbc\xa9\x25\x27\x42\x97\x03\x4f\x90\x91\xad\xd9\xd8\x86\x4a\x60\x48\x47\x3e\xc0\xd8\x91\xb0\x4b\xf0\x10\xf0\x5a\xb5\x49\x44\x7a\x08\x99\xc7\x36\x17\x90\x06\x30\xaf\xa0\xc3\x8e\xb5\x0e\x51\xc0\x91\x01\x7e\x42\x18\xf7\xa2\x64\x1e\x3e\x63\x69\x11\x8d\x19\x5b\xb2\x06\x39\x8e\xe8\xd0\x91\xac\x05\xba\x30\x8b\x8a\x68\x6d\x52\xcb\x15\x1b\x6a\x40\xe2\xce\x1a\xaa\xfb\x90\xc7\x14\xd3\x1a\xae\x36\xdd\xb2\xac\xd6\x1a\xad\xb4\xa7\x51\xe6\x58\xbc\xad\x79\x8d\x0d\x65\x88\xd8\xba\x88\x05\xc2\x66\xf9\xaa\x38\x28\x3f\x7a\x39\x4e\x20\xf7\x62\x8c\x50\x9e\xa5\x3d\x45\x5c\xc6\xc2\xa6\xa2\xb5\x11\x47\xb2\x6b\x8f\x8c\xe6\xa8\x5d\x75\x10\x0a\xad\x43\x8f\x2a\x60\x16\x9d\x4e\x2b\x35\x2b\x37\xe0\xc4\x5c\x3c\x0a\x54\xd4\x09\x7b\xed\x2a\x51\x31\xf4\x0a\xe6\x41\x3a\xcb\x92\x2b\xac\x56\x71\x8d\xc1\x0b\x22\x07\xae\x3d\x3f\x60\xdc\xef\xc3\x39\x40\x1a\x71\x6b\x16\x2e\xe6\x9c\x21\xb0\xca\x02\x6f\x89\x42\x83\x3e\x04\x9a\x56\xb6\x05\x99\xd0\xc0\x55\x25\x8c\x5d\x75\x63\x05\xcb\xe1\x83\x06\xe1\x9e\xa4\xab\x5b\x87\xe3\xe2\xd2\xa9\xbb\xd5\x9a\x08\x54\x44\xa6\xa6\xd8\x32\x98\xab\xc9\xdd\x12\x14\xbd\xf0\x18\xa4\xb7\x31\x80\x7a\x42\x38\xc1\xbd\x20\x8d\x5d\xac\x49\x21\x16\xfa\x68\x8d\xcd\x12\x80\x2c\xa4\x2b\x3d\xaa\x9b\x7c\xaf\xc2\xed\x2e\x61\x16\xd9\xda\x65\x35\xa4\x3c\x20\x2d\x7d\x2e\x9b\x0b\x6b\xcb\x9e\xc3\x20\x99\x7c\x79\x8e\xd8\xcd\xa1\x3e\x9d\xba\x0e\x36\x94\x88\x8d\xb6\xeb\x4a\x70\xa9\xda\x44\x5b\xb3\xc7\xb8\xcb\x7d\x14\x39\x81\xdf\x4b\xf9\x0c\xe5\x45\x49\xec\x81\x3d\x7a\x73\x10\x76\xb0\xeb\xf0\x3e\x4c\x49\xa4\xbc\x1a\x00\x06\x0a\x25\x8e\xa8\x04\x0b\xca\x5e\x2b\xc9\x03\xc1\x5b\x8a\x1a\x68\x81\x40\x8e\xee\x96\x9a\x3d\xb6\xc7\x5c\x81\x59\x03\x75\x00\xb7\xda\x62\x08\x8e\x65\x05\x25\x55\x6a\x19\x78\x0c\xf0\x0f\x28\x9f\xf7\xe1\x14\x82\x46\xc1\x4e\x57\x5d\xb7\xd1\x26\x42\x33\xc1\xd7\x86\xac\x36\x9a\x90\x69\xce\x3e\x50\x8f\xe1\xe8\xbe\xb4\xdd\x67\xab\x8b\x09\x44\xd4\x46\x2d\x4e\x9f\x25\xc1\x1d\x6b\x2f\xcb\xde\x45\x90\x94\x73\x96\x8e\x11\x66\xb2\x81\xbb\xc4\x26\x08\x8e\x98\xb3\xb3\x50\x2a\x28\xf5\x7f\x94\x1f\x1f\x3b\xd9\xff\x39\x7f\x2f\xf9\xbf\xbe\x89\x9b\xcb\xbc\x77\xf5\xf3\xc4\x35\xf1\xd8\x25\x7c\xce\x2c\x9b\x6b\xa3\x8f\x18\xbe\x74\x4f\x48\x8d\x9e\xde\x06\xdb\x73\x6c\xf5\x64\x28\x84\x55\x92\xb1\x56\xc1\x00\x17\xc4\x92\x32\x2a\x33\x83\x0e\x27\x8a\xda\xc3\xd0\xaa\xa5\x27\x5b\x1e\xaf\x1f\x3e\x98\xc3\x56\xc0\xb6\xad\x3b\x8f\xc9\x57\x73\x96\xbb\xdd\xc9\xe1\xd8\xfe\xe8\xc0\x4f\x43\x7e\xdd\x65\xd5\x15\x20\x3a\x46\x56\x4c\x1d\xc3\x75\x3a\x09\x27\x85\xd9\xaa\x0d\xe1\xb6\x79\xf3\x5e\x14\x4b\xc6\xde\x4d\x5c\x2b\x7d\xf0\x8e\x14\x85\x63\x1c\xba\x4e\x9c\xe4\xb6\x1a\x66\xb9\x31\xa7\xc9\x9c\xb0\x77\x6a\xa4\xd0\x91\x02\xb5\x0a\xb3\x56\x45\xa5\x6c\x96\xe4\x31\x1a\x15\x71\x7f\xa0\x06\xd3\x3b\x9c\xef\xf5\xf9\x97\xdd\xfd\x57\xbd\xbe\xb8\xfc\x91\x2f\x3e\xd8\x1e\x2f\x6e\xf2\xc7\x0b\x1a\x36\xe8\xa2\x6f\x9e\xbf\xe1\x0b\xd0\xa7\x97\xaf\xf1\xf1\xef\xff\xf9\xd5\xe3\x27\x6f\x3f\xa5\xeb\x2f\x9f\x89\x3c\x79\xf6\xfd\x93\xfc\xf2\x87\x9f\xde\x3c\xf9\xf6\xb1\xbf\xc4\xe7\x7f\x79\xf5\xfd\x93\xe7\x4f\x3f\xfb\xe8\xaf\xfa\xc3\xb7\xff\xf8\xec\x59\x7d\xfb\x4b\xab\x6e\x6b\xbc\xbf\xad\xdc\x5f\xe2\x4f\xff\xfa\xe6\xbb\xd7\xdf\xf3\xd7\x4b\xff\x88\xf3\xf1\x17\x57\x57\xf1\xe9\xd3\xef\x9e\x7e\xfe\xf6\xc7\xb7\x9f\x7f\xf7\x71\x3e\xfb\xe9\xb3\x7f\x3f\x8b\x4f\x3e\xc1\x4b\x79\xf3\x72\xdf\xfd\xcb\x07\x67\x67\x3f\x3f\xf8\xf9\xc1\x7f\x03\x00\x00\xff\xff\xae\x40\x61\xa1\xbe\x0c\x00\x00")

func ConfigCliFleetEthBetaJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthBetaJson,
		"../config/cli/fleet-eth.beta.json",
	)
}

func ConfigCliFleetEthBetaJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthBetaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.beta.json", size: 3262, mode: os.FileMode(420), modTime: time.Unix(1537278485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ConfigCliFleetEthStagingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x94\x5d\x6f\x5d\x57\x11\x86\xef\xf3\x2b\x8e\xce\x35\xda\x9e\x59\x6b\xd6\xac\x59\xbe\x32\x89\x0b\x15\x28\x96\x9a\x52\xa0\x20\x2e\xe6\x33\x35\x49\x7d\x1c\xfb\xd8\x22\x41\xfd\xef\xe8\x04\xa3\x26\xb4\xb9\xdb\x9a\xbd\x35\xf3\xec\x57\x8f\xde\x7f\x3f\xdb\xed\xf6\x57\x87\xcb\xeb\x7b\x3f\x3c\xe6\xdd\xfb\xfd\xf9\xee\x78\xf7\x90\xbf\x39\x8d\x5f\xe5\x4d\xe4\x87\xc7\xc3\xc3\xfd\xa7\xd3\x17\x6f\x1f\xee\x8f\x79\xf7\xe2\x70\x53\xd7\xaf\xf7\xe7\xbb\xd3\x86\xdd\x6e\xff\xd5\x8d\xda\xdb\x8c\x4f\xbe\xdc\xed\xf6\xbf\x7b\x9b\x79\xdc\x9f\xef\xf6\x79\xfc\x61\xbb\x3f\xea\xeb\xeb\x9b\xd7\xfb\xa7\x77\xcf\x0f\x87\xe3\xd5\x21\xf2\xb4\xfc\xef\x1f\x47\xbb\xdd\x3e\x6f\x0e\x91\xe7\x67\x67\xdc\xc1\xa0\x53\x73\xa5\x5c\x63\xb4\x1a\x30\x91\x8c\x5d\xb2\x49\xf0\x1a\xc3\x1c\x2a\x90\x72\xae\x01\xb5\xba\x79\xb7\x66\xe2\x2e\x8e\xd5\x8d\x03\xa1\x47\x31\xd7\x40\xc5\x1e\x73\x76\x1b\x61\x50\xd8\x81\x19\xcb\x86\x4f\x93\xd2\x86\x4e\x22\x0b\x9c\xc9\xe7\x32\x42\x1d\xac\xb4\xe0\x82\xe6\xb6\x70\x6b\x6d\x6d\x44\xe7\x1d\x08\xe8\x89\xfb\x13\xc8\x9a\xab\xac\x2f\x5c\x35\x9b\xeb\x60\xd0\x00\xea\x14\xee\x5d\xa6\x5a\x25\x61\x02\x33\x37\xc0\xb4\xd0\x50\xc9\x48\x20\x6e\x34\xe8\x04\x95\x06\xc3\x43\x71\x54\x93\x19\xcd\xc9\x42\x46\xa8\x60\x41\x5a\x1b\x01\x4a\xc2\x66\xe6\x12\x45\x6d\xda\x9a\xa8\x3e\x70\xf4\x6e\x01\x50\x79\x81\x93\x36\xec\xb2\x21\xcc\xad\xf5\xf5\x25\x4e\x04\x9d\xe2\x38\x57\x5b\x3a\x01\x57\x16\xa9\xb6\x46\x2b\x66\x87\x56\x93\x35\x45\x81\x8b\xc0\x5a\xb8\x88\x4d\xeb\x98\x56\x45\xca\xad\x97\x19\x91\x9d\x1e\xa7\xba\x69\x5b\xec\xe8\x19\x7d\xce\x11\x0b\xcb\x12\x85\xb8\x3b\x0e\x58\x53\x59\x3b\x57\x58\x73\x01\xaa\xea\xe5\xc3\xfa\xb8\xe8\x63\x6b\x5d\xb6\x75\xa2\xfc\x5f\x9a\x1f\x21\xff\xf1\xe4\xc2\x9f\xee\x4e\x4e\xc5\x4b\xbd\x7e\xfb\x6d\xde\x3d\xe6\xdd\xaf\x4a\x61\x93\x64\x2c\x9c\xec\x6b\x0e\x8c\x8e\xa4\x99\x55\xde\x38\x7d\x95\x30\x2b\x61\x9b\xa3\xe5\x8c\x48\x5f\x68\xb8\x00\x45\x51\x72\xba\xab\x04\xf7\xe9\x95\xcd\x33\xdc\xd6\x6c\x25\x69\x4c\x21\xc8\x65\x31\x8c\x52\x96\xcf\x14\x9f\x15\x33\x4a\x14\x7b\x5b\xa5\xd4\xc3\x04\x0c\xac\xf2\x24\xc5\x68\xdb\x82\x0d\x07\x9f\x77\x18\xbf\x16\x36\x9f\x6c\x30\xd5\x59\x38\x5b\x0b\x44\x54\xf1\xe5\x2c\xde\x97\x76\xa4\x0e\xb9\x62\xf0\xe4\x35\x8a\x11\xa4\x3a\xba\x1b\x7b\x48\x81\x46\x15\xad\x85\x39\x2b\x5c\xa5\x74\x4e\xc8\x39\xcc\x45\xc7\x69\xcf\x8c\x46\xbc\xc0\xcd\x05\x12\x40\x70\x8e\x22\x70\x1c\x33\xb8\x78\x8a\x04\xc9\x45\x03\xde\x50\xd6\xd6\x08\x36\xfc\x22\x66\x52\x39\x82\x63\xf1\x70\xd1\x0c\xe9\xea\x8d\xcd\xd1\xca\x1a\x2a\x0d\x77\x54\x19\x03\x74\x08\xcc\xe9\x12\x2d\xb2\x29\x24\x78\xa0\x24\x41\x05\x41\xcd\xe4\x9a\x01\x2d\x9c\x3d\x80\x97\x34\x03\x24\x4f\x91\xe0\x24\x96\xd9\x46\x9d\x12\xc7\x2e\xb9\x86\x9c\x08\x01\xa0\xe9\xac\xff\x3a\xb1\x36\x5c\x7d\x23\x7c\xa2\xfc\xcc\x89\x6f\x8f\x7a\xbc\xf6\x2f\x36\x04\x40\x5f\x83\x85\x6b\xac\x41\xcc\x4d\xfb\x5c\x9c\x38\xc1\x56\xca\x34\xd3\x62\x51\x18\x10\x63\xe6\x5a\x32\x6d\x8a\xb6\xb6\xda\x80\x16\x9a\x44\xaa\xd9\x4c\x04\x7a\x13\x50\xc0\x99\xbe\xb4\x96\x25\x58\xc7\x86\x61\x2b\xd8\x3a\xaf\xae\xd6\x15\x68\xa0\x0a\xb3\xb9\x65\xc4\x90\x0a\xf5\x27\x19\x5a\xe3\x0d\xfb\x3c\xef\xd0\x61\xfc\x32\xe6\x85\xe4\x60\x1d\xaa\x4d\x53\xeb\xe0\x18\x15\x1d\x43\x63\xf2\x68\x4a\x5c\xa1\xab\x4f\x18\xd4\x34\x13\x0d\xb8\xd1\x12\xc3\x4e\x23\x13\x16\x76\x46\x32\xb1\x95\x3d\x85\xb8\xb5\x14\xd2\xd9\xa0\xfb\x90\x21\x9a\x18\x4b\x70\x15\x77\x4d\x4f\xec\x99\xcc\x92\x54\xcc\x2c\xc0\x7d\xc9\xba\x40\x9e\xdb\x3a\xc5\xbc\x21\xc9\x13\xe5\x67\x31\xff\x5c\xf2\xbf\x88\xfa\xec\xfa\x96\xce\xfe\xaf\x63\xce\x8e\x7e\x7b\xd6\x61\x42\x3f\xcb\xe3\x0f\x8f\x74\x86\xfc\xdd\xf5\x43\xfb\xfa\xb7\x6f\xde\xff\xe1\xeb\xcc\xe3\x37\x74\x79\x75\x1b\x74\xf5\xb7\x76\x73\xfc\xf0\xaf\x97\x87\x36\x3e\x78\xdc\x3e\xfe\xfe\x9b\x57\xef\xde\x5c\x8e\xdb\xe7\xeb\xf9\x57\xfc\xea\xbb\x9f\x83\xfa\x78\xe3\xb3\x7e\xf8\xe2\x85\x1f\xf1\xfe\xcf\xef\xff\xfa\xe3\x9b\x97\x57\xff\x8c\xbc\xfc\xcb\xbb\x3f\xb6\x87\x3b\x7b\xff\xa2\x1f\x9e\x7f\x7d\x2d\x2f\x2f\x6f\x5f\xc4\xf7\x6f\x6e\xee\xf1\xe6\x7b\xad\x77\x1f\x9e\x7e\xf2\xd9\x6e\xf7\xd3\xb3\x9f\x9e\xfd\x27\x00\x00\xff\xff\x2e\x5d\x21\x27\xe6\x06\x00\x00")

func ConfigCliFleetEthStagingJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthStagingJson,
		"../config/cli/fleet-eth.staging.json",
	)
}

func ConfigCliFleetEthStagingJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthStagingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.staging.json", size: 1766, mode: os.FileMode(420), modTime: time.Unix(1537278485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ConfigCliFleetEthTestJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x94\x4d\x6f\x5c\x49\x15\x86\xf7\xfe\x15\xad\x5e\xa3\x9e\xaa\xf3\x5d\x5e\x45\x33\x09\x6c\x42\x16\x04\x56\x88\xc5\xf9\xaa\x60\xc9\x72\x4b\x76\xc7\x12\xa0\xfc\x77\xd4\x8e\x91\x42\x26\xd9\xbe\xf7\xde\xaa\xe7\xbe\xf5\xd4\xf9\xcf\xcd\xe1\x70\xfc\x70\x7e\x7b\xf7\x94\xe7\xe7\x7e\xfc\xd7\xf1\xf6\x70\x79\xfc\xdc\x7f\xb8\xc6\x7f\xe9\x87\xea\x7f\x3f\x9f\x3f\x3f\x1d\x6f\x0f\xdb\xef\x9f\xbe\xc6\xef\xcf\x9f\xde\xf7\x73\xdf\x1f\x6f\x0f\xc7\xb7\xef\x7e\xfd\xdb\x9f\x8e\x2f\xf1\x6f\xf7\x9f\x9f\x2e\xfd\xf8\xdb\xf9\x61\xdf\x7d\x3a\xde\x1e\xae\x2b\x1f\x0e\xc7\x77\x0f\x1e\xf7\x5d\xdf\xac\x7b\x38\x1c\xff\x78\xdf\x7d\xb9\x7e\xdf\x97\x7f\x9e\x2e\xfd\x74\x39\xbe\x3e\xf8\xf5\x7c\xbe\x7c\x38\x57\x5f\x77\xfc\xfb\x4b\x74\x38\x1c\xfb\xe1\x5c\x7d\xfb\xcb\x2f\xe5\xde\xd0\x0a\x06\xa3\x4d\x7a\x11\x6c\x07\x37\x77\x2d\xe9\xb5\x98\x8a\x06\xa1\x2b\x23\x19\x96\x45\x21\x5a\x4f\x89\x36\xc8\xbd\x04\x70\x41\x71\x8e\x9e\xde\xac\x89\xa5\x0b\x13\x0b\xab\xaa\x6c\x17\x1b\xe2\x02\x81\x26\x40\xaa\x5c\x22\x7b\x31\x66\x29\x06\x23\x6f\xde\xfe\x86\xf4\xc4\x70\x9a\x66\xa7\x49\xeb\x16\x07\x0d\x7a\x05\xff\x86\x72\xf5\x58\x66\xac\xdc\xa1\x3a\x35\x81\xab\x5d\x61\xd7\x9c\xa9\x81\xaa\xa2\x95\x63\xe5\x74\x15\x93\xad\x09\x9d\xac\x5a\x38\xac\x80\xae\x2f\x64\x87\x28\x57\x13\x4e\x25\x25\x9f\x6e\x3a\x9a\xd4\x0c\x14\x61\x89\x6e\xda\xae\xc6\x31\x20\x7c\x71\x89\xac\xc0\x59\x24\x54\x9d\xe3\x0d\x0c\x39\x4d\x5b\x27\x20\x3c\x4d\xa1\x9f\x71\xe6\x6c\x1e\xd3\xcc\x34\x4d\xb0\x84\xae\xfb\x85\xac\xd8\x32\x95\x65\x0e\x53\x03\x26\x1c\x4d\x34\xa6\x22\x6e\x0e\x57\x4d\x1d\x15\x93\x00\xa5\x36\xda\xdc\xbd\x63\x74\xf4\xf4\x24\x80\x45\xb1\x1a\x64\x46\x34\x20\x56\x54\x18\x36\x42\xb2\x49\x8a\x78\x83\xa4\x55\xeb\xc8\xa0\x7c\x83\xfc\xb5\x4a\xb1\xd3\x44\x7d\xc5\x7c\xa1\xfc\xc7\xab\x0d\x7f\x7d\xbc\x2a\x55\x7f\xf6\xbb\xfb\x8f\xfd\xf8\xdc\x8f\x3f\xd4\x62\x31\xe5\x10\x19\xe8\xd2\xca\x1c\x7b\xf7\x5a\x0b\x64\xf2\x26\x65\x36\xb2\x28\x5f\xee\x55\xae\x54\x0b\x86\x3b\xce\x9a\x65\x4d\x5b\x06\x40\x25\xb3\x54\xba\xa8\xd8\x36\x1f\x7b\x11\xaf\xcd\x1a\x0a\x8b\xc7\xaa\xc0\xb4\xc0\x08\x1b\x9e\x3b\xca\x1c\x26\xe0\x30\xdd\x92\x51\x1a\xf5\xad\x16\x4b\x6e\x71\xf0\x8f\xea\x6e\x32\xe1\xdd\x92\xe0\xd7\xb3\x67\x41\x17\x22\x5d\x6b\x94\xf5\xca\x16\x05\x21\xf2\xc6\x1e\x06\x57\x07\xd0\x3a\xe7\xbe\x9e\xc8\xe8\xde\x82\x30\x72\xa8\x73\xc9\x48\x0c\x81\xb5\xb9\x88\x16\xed\x85\x25\x61\xe2\x4a\xec\x23\xb6\x90\x07\x2c\x8e\xd8\xc2\xba\xc6\x54\xaf\x94\x2e\xfb\x4e\x8b\xf9\x33\x4e\x1d\xda\xac\xc4\xe8\x59\xd8\x64\x96\x44\xb1\x6a\xf4\xd4\xa5\x8c\x3a\x1b\xb6\xed\xab\xa0\xc0\xed\xcd\xe1\xe9\x2b\x56\x5a\x0f\x49\x93\xac\xd6\xd4\x45\x2e\x09\x8d\x02\x03\x63\xaf\xcd\x92\xde\x16\xa3\x79\x6c\x0c\xc4\xa4\x84\x90\x45\xae\xe1\xdd\x3e\x95\x89\x84\xb2\xa9\xf1\x45\x8b\x05\x27\x80\x75\x9a\x0a\xaf\x98\xff\xa7\xc5\xc7\x8b\x5f\xee\xf2\xa7\x63\xc2\x0b\x6d\x2f\x1a\x38\xdc\x48\x32\x75\x0c\x0e\xf5\xb9\x31\x24\xc6\x8c\x4d\xbd\x79\x15\x52\x5b\x61\xc9\xa6\x9a\x50\x1b\xb0\x26\x85\x9b\xb0\xe8\x00\x27\xe4\x42\xca\x4d\xb5\x31\x68\x42\x8e\x9c\x0b\xb0\x36\x7b\x65\xb6\x91\x4c\x84\xe9\xa3\x6c\xef\x58\x84\x1c\x20\xcd\x0a\x09\xff\x1b\x13\xc0\xd7\x1f\xb9\x5e\x3f\x1c\xfc\xfb\x9e\x67\xcd\x85\x82\xdc\x63\xf2\x9a\xb6\xc3\x38\xc2\xb7\x2a\x5d\x6f\xe3\x84\x2d\x5c\x3a\x52\x96\x2a\x0f\x99\xa6\xbd\x07\x11\x8c\x52\xea\x1c\x92\xab\x6d\x8f\xca\x60\x6d\x1f\x04\xdb\xb8\xb6\x29\x21\x96\xc7\x54\x9f\x20\xa3\xcb\xaa\x7a\x46\xed\x55\x52\x5c\x50\x4d\xa1\xb1\xad\xd7\xc2\xef\x7c\xc0\x57\xce\xaf\x45\xdf\x1c\x0e\x5f\x6e\xbe\xdc\xfc\x37\x00\x00\xff\xff\x01\xdd\x8c\xdc\x1d\x06\x00\x00")

func ConfigCliFleetEthTestJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliFleetEthTestJson,
		"../config/cli/fleet-eth.test.json",
	)
}

func ConfigCliFleetEthTestJson() (*asset, error) {
	bytes, err := ConfigCliFleetEthTestJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/fleet-eth.test.json", size: 1565, mode: os.FileMode(420), modTime: time.Unix(1537278485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ConfigCliLesEnabledJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x50\x50\xf2\xc9\x4c\xcf\x28\x71\x2d\xc9\x70\xce\xcf\x4b\xcb\x4c\x57\xb2\x52\x80\x88\x83\xe5\x5c\xf3\x12\x93\x72\x52\x53\x94\xac\x14\x4a\x8a\x4a\x53\xc1\xe2\xb5\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\xa6\x74\x24\x05\x3a\x00\x00\x00")

func ConfigCliLesEnabledJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigCliLesEnabledJson,
		"../config/cli/les-enabled.json",
	)
}

func ConfigCliLesEnabledJson() (*asset, error) {
	bytes, err := ConfigCliLesEnabledJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/cli/les-enabled.json", size: 58, mode: os.FileMode(420), modTime: time.Unix(1536907098, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ConfigStatusChainGenesisJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x6f\x13\x31\x10\x85\xef\xf9\x15\x96\xcf\x1c\xc6\xf6\x78\x66\xbd\x37\x4a\x59\x81\xc4\x8d\x5f\x30\xb6\xc7\xcd\xaa\x9b\x6c\x94\x6c\xa4\x16\xd4\xff\x8e\x92\x2c\xa1\x42\x9c\xf0\xcd\x7e\x33\xef\x7b\x7e\x3f\x37\xc6\x58\x99\xa6\xb9\xd8\xde\x5c\x2e\xc6\x18\x9b\x07\x47\x58\x24\xa0\x0b\x9e\x04\x42\x8e\xc8\x05\xe2\x43\xc0\x90\xfd\x67\xef\x74\xf8\xa8\x1e\x73\xfa\xb3\x62\x6c\x96\x49\xf6\x45\x6d\x6f\x2c\xbc\x38\x18\xe0\xd3\x00\x84\x8f\x8f\x31\x79\xb8\x1c\x7b\x1d\x7c\xfb\xb0\x22\x3c\x44\x89\x15\x94\x7d\x6b\x14\x81\x53\x2b\x92\x33\x0a\x05\x0d\xa1\xfa\x4e\x84\xaa\x36\x5f\xfe\x03\xb1\x59\x31\xb6\xcc\xfb\x36\x3e\xdd\x1d\x6c\xd9\xca\xb8\xff\x5a\x6d\x6f\x98\xf9\x16\xc4\x6e\xe7\x9d\x9e\x16\x95\xfa\x30\xcd\xe5\xd9\xf6\x06\x56\xa1\xca\x3c\xcc\xc7\xe7\xef\xe7\xc3\x61\x3e\x2e\xb6\x37\xcb\xf1\xac\xab\x96\x5f\x7f\xc8\x7e\x19\xcf\xbb\xbf\x97\x74\x3c\xb8\x08\x5f\xe4\xb4\xbd\x85\x8c\xa0\xa4\x35\xa3\x26\xa8\x89\x1c\x49\xe9\x72\x63\xe7\x92\x6a\xe0\x82\x80\x5d\x41\x27\x15\x52\xf0\x1d\x31\xa9\xcb\x21\xd5\x42\x9d\x80\x96\x96\x43\xb5\xef\x7d\xe3\x3f\x69\xdd\xfd\xf5\xfe\xef\x3a\xb6\x36\x96\xf3\xb4\xbc\xfe\xae\xea\xda\xce\x55\xd3\x97\xe5\x28\x8f\xb2\xc8\x1a\x30\x30\x92\x63\xe4\xc8\x01\x03\x75\xe4\x28\x91\x7a\x88\xc0\x9e\x12\xd3\x45\xa3\xe8\x21\x22\x45\xbe\xcc\x26\x52\x62\x0f\xa8\x14\x19\x99\xa9\xb1\xa7\x7c\xb3\x7e\x92\xd3\xb7\x71\x37\x2e\xef\xa1\x60\x37\x6f\x9b\x5f\x01\x00\x00\xff\xff\x91\xc6\xb3\x58\x64\x02\x00\x00")

func ConfigStatusChainGenesisJsonBytes() ([]byte, error) {
	return bindataRead(
		_ConfigStatusChainGenesisJson,
		"../config/status-chain-genesis.json",
	)
}

func ConfigStatusChainGenesisJson() (*asset, error) {
	bytes, err := ConfigStatusChainGenesisJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../config/status-chain-genesis.json", size: 612, mode: os.FileMode(420), modTime: time.Unix(1536907098, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../config/cli/fleet-eth.beta.json": ConfigCliFleetEthBetaJson,
	"../config/cli/fleet-eth.staging.json": ConfigCliFleetEthStagingJson,
	"../config/cli/fleet-eth.test.json": ConfigCliFleetEthTestJson,
	"../config/cli/les-enabled.json": ConfigCliLesEnabledJson,
	"../config/status-chain-genesis.json": ConfigStatusChainGenesisJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"config": &bintree{nil, map[string]*bintree{
			"cli": &bintree{nil, map[string]*bintree{
				"fleet-eth.beta.json": &bintree{ConfigCliFleetEthBetaJson, map[string]*bintree{}},
				"fleet-eth.staging.json": &bintree{ConfigCliFleetEthStagingJson, map[string]*bintree{}},
				"fleet-eth.test.json": &bintree{ConfigCliFleetEthTestJson, map[string]*bintree{}},
				"les-enabled.json": &bintree{ConfigCliLesEnabledJson, map[string]*bintree{}},
			}},
			"status-chain-genesis.json": &bintree{ConfigStatusChainGenesisJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

