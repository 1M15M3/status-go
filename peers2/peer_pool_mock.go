// Code generated by MockGen. DO NOT EDIT.
// Source: peers2/peer_pool.go

// Package peers2 is a generated GoMock package.
package peers2

import (
	event "github.com/ethereum/go-ethereum/event"
	p2p "github.com/ethereum/go-ethereum/p2p"
	discover "github.com/ethereum/go-ethereum/p2p/discover"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockp2pServer is a mock of p2pServer interface
type Mockp2pServer struct {
	ctrl     *gomock.Controller
	recorder *Mockp2pServerMockRecorder
}

// Mockp2pServerMockRecorder is the mock recorder for Mockp2pServer
type Mockp2pServerMockRecorder struct {
	mock *Mockp2pServer
}

// NewMockp2pServer creates a new mock instance
func NewMockp2pServer(ctrl *gomock.Controller) *Mockp2pServer {
	mock := &Mockp2pServer{ctrl: ctrl}
	mock.recorder = &Mockp2pServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockp2pServer) EXPECT() *Mockp2pServerMockRecorder {
	return m.recorder
}

// SubscribeEvents mocks base method
func (m *Mockp2pServer) SubscribeEvents(arg0 chan *p2p.PeerEvent) event.Subscription {
	ret := m.ctrl.Call(m, "SubscribeEvents", arg0)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeEvents indicates an expected call of SubscribeEvents
func (mr *Mockp2pServerMockRecorder) SubscribeEvents(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeEvents", reflect.TypeOf((*Mockp2pServer)(nil).SubscribeEvents), arg0)
}

// Self mocks base method
func (m *Mockp2pServer) Self() *discover.Node {
	ret := m.ctrl.Call(m, "Self")
	ret0, _ := ret[0].(*discover.Node)
	return ret0
}

// Self indicates an expected call of Self
func (mr *Mockp2pServerMockRecorder) Self() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Self", reflect.TypeOf((*Mockp2pServer)(nil).Self))
}

// PeersInfo mocks base method
func (m *Mockp2pServer) PeersInfo() []*p2p.PeerInfo {
	ret := m.ctrl.Call(m, "PeersInfo")
	ret0, _ := ret[0].([]*p2p.PeerInfo)
	return ret0
}

// PeersInfo indicates an expected call of PeersInfo
func (mr *Mockp2pServerMockRecorder) PeersInfo() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeersInfo", reflect.TypeOf((*Mockp2pServer)(nil).PeersInfo))
}

// AddPeer mocks base method
func (m *Mockp2pServer) AddPeer(arg0 *discover.Node) {
	m.ctrl.Call(m, "AddPeer", arg0)
}

// AddPeer indicates an expected call of AddPeer
func (mr *Mockp2pServerMockRecorder) AddPeer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*Mockp2pServer)(nil).AddPeer), arg0)
}

// RemovePeer mocks base method
func (m *Mockp2pServer) RemovePeer(arg0 *discover.Node) {
	m.ctrl.Call(m, "RemovePeer", arg0)
}

// RemovePeer indicates an expected call of RemovePeer
func (mr *Mockp2pServerMockRecorder) RemovePeer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePeer", reflect.TypeOf((*Mockp2pServer)(nil).RemovePeer), arg0)
}
